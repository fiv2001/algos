<snippet>
    <content><![CDATA[
template <typename T>
struct segtree {
    ll n;
    T zero;
    inline T mrg(T a, T b) {
        return a + b;
    }
    inline void add(T &a, T b) {
        a = b;
    }
    vector <T> V;
    segtree(ll n_, T zero_ = 0) {
        n = n_;
        V.resize(4 * n_ + 7);
        zero = zero_;
    }
    inline void build(ll v, ll tl, ll tr) {
        if (tl == tr) {
            V[v] = A[tl];
            return;
        }
        ll tm = (tl + tr) / 2;
        build(2 * v, tl, tm);
        build(2 * v + 1, tm + 1, tr);
        V[v] = mrg(V[2 * v], V[2 * v + 1]);
    }    
    inline void build() {
        build(1, 0, n - 1);
    }
    inline void update(ll v, ll tl, ll tr, ll i, ll color) {
        if (i < tl || i > tr) {
            return;
        }
        if (tl == tr) {
            add(V[v], color);
            return;
        }
        ll tm = (tl + tr) / 2;
        update(2 * v, tl, tm, i, color);
        update(2 * v + 1, tm + 1, tr, i, color);
        V[v] = mrg(V[2 * v], V[2 * v + 1]);
    }
    inline T getans(ll v, ll tl, ll tr, ll l, ll r) {
        if (l > tr || tl > r || l > r) {
            return zero;
        }
        if (tl == l && tr == r) {
            return V[v];
        }
        ll tm = (tl + tr) / 2;
        T ans1 = getans(2 * v, tl, tm, l, min(r, tm));
        T ans2 = getans(2 * v + 1, tm + 1, tr, max(l, tm + 1), r);
        return mrg(ans1, ans2);
    }
    inline void update(ll i, ll color) {
        update(1, 0, n - 1, i, color);
    }
    inline T getans(ll l, ll r) {
        T ans = getans(1, 0, n - 1, l, r); 
        return ans;
    }
};
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>segtree</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
